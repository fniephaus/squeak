How To Build On Mac OS X
---------------------


Contents:
	- Overview
	- Checking out sources to build out-of-the-box
	- Building out of the box
	- Building the Bochs Support Libraries
	- Optimization level and gcc version (please read!)


Overview
--------
The "Cog" VM comes in a bewildering variety of forms.  The first distinction
is between Squeak/Croquet VMs that run Squeak, Pharo, Cuis, Croquet images
and their ilk, and between Newspeak VMs that run Newspeak.

Another distinction is between Stack, Cog and Sista VMs.  Stack VMs are those
with context-to-stack mapping that optimise message sending by keeping method
actications on a stack instead of in contexts.  These are pure interpreters but
significantly faster than the standard context-based Interpreter VM.  Cog VMs
add a JIT to the mix, compiling methods used more than once to maxchine code on
the fly.  Sista VMs, as yet unrealised and in development, add support for
adaptive optimization that does speculative inlining at the bytecode-to-bytecode
level.  These are targeted for release in 2015.

Another distinction is between 32-bit and 64-bit Spur VMs.  While Spur
has a common object header format common to 32 and 64 bit versions, the 32-bit
version uses 32-bit pointers and immediates, whereas the 64-bit version uses
64-bit pointers and immediates and will only run on 64-bit machines.

Another distinction is between normal single-threaded VMs that schedule "green"
Smalltalk processes above a single-threaded VM, and "multi-threaded" VMs that
share the VM between any number of native threads such that only one native
thread owns the VM at any one time, switching between threads on FFI calls and
callbacks or on Smalltalk process switches when Smalltalk processes are owned
by threads.  This multi-threaded support is as yet experimental.

The final distinction is between production, assert and debug VMs.  Production
VMs are fully optimized, although they may include debugging symbols, and as
their name implies are for use in production.  Assert and debug VMs include
many assert checks that are disabled in the production VMs.  These asserts are
very helpful in debugging VM problems but significantly impact performance.
The difference between assert and debug VMs is that assert VMs are compiled
with moderate optimization, which improves the performance of the asserts,
whereas debug VMs are compiled with no optimization at all, providing maximum
debuggability with minimum performance.

This directory tree provides build directories for some of this matrix.  For
example, squeak.cog.v3 contains a build directory for Smalltalk Cog VMs using
the old object representation, newspeak.stack.spur contains a build directory
for Newspeak Stack VMs using the Spur object representation.  Build as desired.


Checking out sources to build out-of-the-box
--------------------------------------------
Check-out at least the relevant platform sources, vm and plugin sources,
processor sources and the relevant build directories
     svn co http://www.squeakvm.org/svn/squeak/branches/Cog/platforms
     svn co http://www.squeakvm.org/svn/squeak/branches/Cog/processors
     svn co http://www.squeakvm.org/svn/squeak/branches/Cog/build.macos64x64
     svn co http://www.squeakvm.org/svn/squeak/branches/Cog/src etc
		(see section "VM source directories" in the root README)


Building out of the box
-----------------------
0. As of this writing (December 2015) only the squeak.cog.spur builds build
on 10.9 and later, using John McIntosh's Cocoa platform support files.  The
rest of the builds don't work yet.  We are transitioning as fast as possible
to Cocoa.  Volunteers welcome.

1. Install the tools (Xcode etc);  the SqueakCogSpur32x86.xcodeproj is set-up to
build using clang 6.x or clang 7.x.

2. Either disable the building of the Bochs plugins (see each makeiosvm file,
disabling the lines beginning "# Build the BochsIA32Plugin") or build the
Bochs support libraries (see Building the Bochs Support Libraries below).

3. cd to the VM configuration of your choice and execute
	./miosvm -A
This will build CocoaFast.app, CocoaDebug.app and CocoaAssert.app applications
containing the three basic VM configurations.  If the configuration includes
the multi-threaded VM you can use miosvm -AS to make the single-threaded VMs,
miosvm -AT to make the multi-threadeds in FastMT.app et al, and miosvm -A to make
them all.  miosvm -d will make the CocoaDebug.app VM, etc.  miosvm -? provides the
gory details.



Each build directory contains three files
	plugins.int
	plugins.ext
On other platforms editing these and making is all one needs to do to change the
set of plugins.  Alas on Xcode one also has to edit the relevant Xcode projects
to add and remove source files.  If you're brave enough to contemplate this
you're brave enough to figure out how to do this yourself.


Building the Bochs Support Libraries
------------------------------------
If you want to get the Cog VM simulator working you'll need to build the
BochsIA32Plugin and/or the BochsX64Plugin to build that you'll need to first
build bochs.  First check-out the processor simulator source tree containing
Bochs:
     svn co http://www.squeakvm.org/svn/squeak/branches/Cog/processors
Then build the libraries.  cd to e.g. build.macos32x86/bochsx86, run

  $ cd build.macos32x86/bochsx86
  $ ./conf.COG
  $ ../../processors/IA32/bochs/makeem


Eliot Miranda
December 2015
