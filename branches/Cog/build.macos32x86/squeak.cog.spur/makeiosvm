#!/bin/bash
# Build a "complete" Mac VM consisting of CoreVM/CoreMTVM + Plugins.
# By default build the Release configuration into $DEST$VMAPP (CocoaSqueak.app)
IFS='	
'
BUILD_CONFIGURATION=Release
NSD_BUILD_CONFIGURATION=Deployment
XCD_BUILD_CONFIGURATION=Release
APP=Squeak.app
#OBJDIR=Squeak.build/Objects-normal/i386
OBJDIR=SqueakCogSpur32x86.build/Objects-normal/i386
VMAPP=".app"
DEST="CocoaSqueak"
VMXCP=SqueakCogSpur32x86
SFP=SqueakFFIPrims
KEEP=

USAGE="usage: `basename $0` -[admskh?]"

while getopts 'admskh?' opt $@; do
	case $opt in
	a)		BUILD_CONFIGURATION=Assert
			NSD_BUILD_CONFIGURATION=Development
			XCD_BUILD_CONFIGURATION=Debug
			DEST=CocoaAssert;;
	d)		BUILD_CONFIGURATION=Debug
			NSD_BUILD_CONFIGURATION=Development
			XCD_BUILD_CONFIGURATION=Debug
			DEST=CocoaDebug;;
	m)		VMAPP="MT.app";
			VMXCP=SqueakCogSpur32x86MT;
			SFP=SqueakMTFFIPrims;;
	s)		BUILD_CONFIGURATION=Release
			DEST=CocoaFast;;
	k)		KEEP=1;;
	h|\?|*)	echo $USAGE
			echo '	build the vm (defaults to a Deployment version)'
			echo '  -a: compile Assert configuration in Assert.app for assert checks'
			echo '  -d: compile Development configuration in Debug.app for debugging'
			echo '  -m: compile the multi-threaded version of the target, e.g. FastMT.app instead of Fast.app'
			echo '  -s: compile Release configuration in Fast.app for partial debugging'
			echo "  -k: keep (do not delete) the existing $APP prior to the build"
			echo '	-h: display this help'
			exit 0;;
	esac
done

DEST="$DEST$VMAPP"
if [ -z "$DEVELOPER_SDK_DIR" ]; then
	DEVELOPER_SDK_DIR=/Developer/SDKs
fi
test -d "$DEVELOPER_SDK_DIR" || echo '$DEVELOPER_SDK_DIR' "$DEVELOPER_SDK_DIR" does not exist \(needed by $SFP project\)
export DEVELOPER_SDK_DIR

test "$KEEP" = 1 || rm -rf "$DEST"/* "$DEST"/.??*

# Build CoreVM/CoreMTVM using xcode
echo # maddeningly xcode has no equivalent of .FORCE and if you use an Xcode script to nuke this file the build fails
echo rm \"build/$VMXCP.build/$BUILD_CONFIGURATION/$OBJDIR/version.o\"
rm "build/$VMXCP.build/$BUILD_CONFIGURATION/$OBJDIR/version.o"
echo $VMXCP xcodebuild -project $VMXCP.xcodeproj -configuration $BUILD_CONFIGURATION
export TZ="`date +%Z`"
xcodebuild -project $VMXCP.xcodeproj -configuration $BUILD_CONFIGURATION
if [ -d "$DEST" ]; then
	cp -Rp build/$BUILD_CONFIGURATION/$APP/* "$DEST"
else
	cp -Rp build/$BUILD_CONFIGURATION/$APP "$DEST"
fi
../../scripts/versionInfoPlist ../../platforms SqueakCogSpur32x86.plist "$DEST/Contents/Info.plist"

# Build the Float plugin
echo
echo FloatMathPlugin xcodebuild -project FloatMathPlugin/FloatMathPlugin.xcodeproj -configuration Release
xcodebuild -project FloatMathPlugin/FloatMathPlugin.xcodeproj -configuration Release
rm -rf "$DEST/Contents/Resources/FloatMathPlugin.bundle"
echo cp -R FloatMathPlugin/build/Release/FloatMathPlugin.bundle "$DEST/Contents/Resources"
cp -R FloatMathPlugin/build/Release/FloatMathPlugin.bundle "$DEST/Contents/Resources"

# Build the FloatArray plugin
echo
echo FloatArrayPlugin xcodebuild -project FloatArrayPlugin/FloatArrayPlugin.xcodeproj -configuration Release
xcodebuild -project FloatArrayPlugin/FloatArrayPlugin.xcodeproj -configuration Release
rm -rf "$DEST/Contents/Resources/FloatArrayPlugin.bundle"
cp -R FloatArrayPlugin/build/Release/FloatArrayPlugin.bundle "$DEST/Contents/Resources"

# Build the Croquet plugin
echo
echo CroquetPlugin xcodebuild -project CroquetPlugin/CroquetPlugin.xcodeproj -configuration Release
xcodebuild -project CroquetPlugin/CroquetPlugin.xcodeproj -configuration Release
rm -rf "$DEST/Contents/Resources/CroquetPlugin.bundle"
cp -R CroquetPlugin/build/Release/CroquetPlugin.bundle "$DEST/Contents/Resources"

#Build the mpeg3 plugin
echo
echo Mpeg3Plugin xcodebuild -project Mpeg3Plugin/Mpeg3Plugin.xcodeproj -configuration $NSD_BUILD_CONFIGURATION
xcodebuild -project Mpeg3Plugin/Mpeg3Plugin.xcodeproj -configuration $NSD_BUILD_CONFIGURATION
cp -R Mpeg3Plugin/build/$NSD_BUILD_CONFIGURATION/Mpeg3Plugin.bundle "$DEST/Contents/Resources"

echo
echo SqueakFFIPlugin xcodebuild -project $SFP/SqueakFFI.xcodeproj -configuration $NSD_BUILD_CONFIGURATION
xcodebuild -project $SFP/SqueakFFI.xcodeproj -configuration $NSD_BUILD_CONFIGURATION
rm -rf "$DEST/Contents/Resources/SqueakFFIPrims.bundle"
cp -R $SFP/build/$NSD_BUILD_CONFIGURATION/SqueakFFIPrims.bundle "$DEST/Contents/Resources"

# Build the SSL plugin (New as of 25 March 2013)
echo
echo SqueakSSL xcodebuild -project SqueakSSL/SqueakSSL.xcodeproj -configuration $XCD_BUILD_CONFIGURATION
xcodebuild -project SqueakSSL/SqueakSSL.xcodeproj -configuration $XCD_BUILD_CONFIGURATION
rm -rf "$DEST/Contents/Resources/SqueakSSL.bundle"
cp -R SqueakSSL/build/$XCD_BUILD_CONFIGURATION/SqueakSSL.bundle "$DEST/Contents/Resources"

# Build the BochsIA32Plugin
# N.B. To build the plugin you also have to build the Bochs libraries in
# ../bochsx86.  cd ../bochsx86. Run conf.COG & ../../processors/IA32/bochs/makeem.
if test -f ../bochsx86/cpu/libcpu.a; then
echo BochsIA32Plugin xcodebuild -configuration $XCD_BUILD_CONFIGURATION -project BochsIA32Plugin/BochsIA32Plugin.xcodeproj
xcodebuild -configuration $XCD_BUILD_CONFIGURATION -project BochsIA32Plugin/BochsIA32Plugin.xcodeproj
rm -rf "$DEST/Contents/Resources/BochsIA32Plugin.bundle"
cp -R BochsIA32Plugin/build/$XCD_BUILD_CONFIGURATION/BochsIA32Plugin.bundle "$DEST/Contents/Resources"
else
echo "not building BochsIA32Plugin; support libraries unavailable"
fi

# Build the BochsX64Plugin
# N.B. To build the plugin you also have to build the Bochs libraries in
# ../bochsx64.  cd ../bochsx64. Run conf.COG & ../../processors/IA32/bochs/makeem.
if test -f ../bochsx64/cpu/libcpu.a; then
echo BochsX64Plugin xcodebuild -configuration $XCD_BUILD_CONFIGURATION -project BochsX64Plugin/BochsX64Plugin.xcodeproj
xcodebuild -configuration $XCD_BUILD_CONFIGURATION -project BochsX64Plugin/BochsX64Plugin.xcodeproj
rm -rf "$DEST/Contents/Resources/BochsX64Plugin.bundle"
cp -R BochsX64Plugin/build/$XCD_BUILD_CONFIGURATION/BochsX64Plugin.bundle "$DEST/Contents/Resources"
else
echo "not building BochsX64Plugin; support libraries unavailable"
fi

# Build the GdbARMPlugin
# N.B. To build the plugin you also have to build the gdb ARM sim
# libraries in ../gdbarm32. cd ../gdbarm32. Run conf.COG & makeem.
if test -f ../gdbarm32/opcodes/libopcodes.a; then
echo GdbARMPlugin xcodebuild -configuration $XCD_BUILD_CONFIGURATION -project GdbARMPlugin/GdbARMPlugin.xcodeproj
xcodebuild -configuration $XCD_BUILD_CONFIGURATION -project GdbARMPlugin/GdbARMPlugin.xcodeproj
rm -rf "$DEST/Contents/Resources/GdbARMPlugin.bundle"
cp -R GdbARMPlugin/build/$XCD_BUILD_CONFIGURATION/GdbARMPlugin.bundle "$DEST/Contents/Resources"
else
echo "not building GdbARMPlugin; support libraries unavailable"
fi

# Build the UnixOSProcessPlugin
echo UnixOSProcessPlugin xcodebuild -configuration $XCD_BUILD_CONFIGURATION -project UnixOSProcessPlugin/UnixOSProcessPlugin.xcodeproj
xcodebuild -configuration $XCD_BUILD_CONFIGURATION -project UnixOSProcessPlugin/UnixOSProcessPlugin.xcodeproj
rm -rf "$DEST/Contents/Resources/UnixOSProcessPlugin.bundle"
cp -R UnixOSProcessPlugin/build/$XCD_BUILD_CONFIGURATION/UnixOSProcessPlugin.bundle "$DEST/Contents/Resources"

# Clean out any .svn directories (result of copying) in the VM
find "$DEST" -name .svn -exec rm -rf {} \;

