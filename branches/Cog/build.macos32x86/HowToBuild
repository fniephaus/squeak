How To Build On Mac OS X
---------------------


Contents:
	- Overview
	- Checking out sources to build out-of-the-box
	- Building out of the box
	- Building the Bochs Support Libraries
	- Optimization level and gcc version (please read!)


Overview
--------
The "Cog" VM comes in a bewildering variety of forms.  The first distinction
is between Squeak/Croquet VMs that run Squeak, Pharo, Cuis, Croquet images
and their ilk, and between Newspeak VMs that run Newspeak.

Another distinction is between Stack, Cog and Sista VMs.  Stack VMs are those
with context-to-stack mapping that optimise message sending by keeping method
activations on a stack instead of in contexts.  These are pure interpreters but
significantly faster than the standard context-based Interpreter VM.  Cog VMs
add a JIT to the mix, compiling methods used more than once to maxchine code on
the fly.  Sista VMs, as yet unrealised and in development, add support for
adaptive optimization that does speculative inlining at the bytecode-to-bytecode
level.  These are targeted for release in 2015.

Another distinction is between "v3" VMs and Spur VMs.  "v3" is the original
object representation for Squeak as described in the back-to-the-future paper.
Spur, as described on the www.mirandabanda.org blog, is a faster object
representation which uses generation scavenging, lazy forwarding for fast
become, and a single object header format common to 32 and 64 bit versions.

Another distinction is between normal single-threaded VMs that schedule "green"
Smalltalk processes above a single-threaded VM, and "multi-threaded" VMs that
share the VM between any number of native threads such that only one native
thread owns the VM at any one time, switching between threads on FFI calls and
callbacks or on Smalltalk process switches when Smalltalk processes are owned
by threads.  This multi-threaded support is as yet experimental.

The final distinction is between production, assert and debug VMs.  Production
VMs are fully optimized, although they may include debugging symbols, and as
their name implies are for use in production.  Assert and debug VMs include
many assert checks that are disabled in the production VMs.  These asserts are
very helpful in debugging VM problems but significantly impact performance.
The difference between assert and debug VMs is that assert VMs are compiled
with moderate optimization, which improves the performance of the asserts,
whereas debug VMs are compiled with no optimization at all, providing maximum
debuggability with minimum performance.

This directory tree provides build directories for some of this matrix.  For
example, squeak.cog.v3 contains a build directory for Smalltalk Cog VMs using
the old object representation, newspeak.stack.spur contains a build directory
for Newspeak Stack VMs using the Spur object representation.  Build as desired.


Checking out sources to build out-of-the-box
--------------------------------------------
Check-out at least the relevant platform sources, vm and plugin sources,
processor sources and the relevant build directories
     svn co http://www.squeakvm.org/svn/squeak/branches/Cog/platforms
     svn co http://www.squeakvm.org/svn/squeak/branches/Cog/processors
     svn co http://www.squeakvm.org/svn/squeak/branches/Cog/build.macos32x86
     svn co http://www.squeakvm.org/svn/squeak/branches/Cog/src etc
		(see section "VM source directories" in the root README)


Building out of the box
-----------------------
0. As of this writing (June 2014) this Mac build system builds only on 10.6.x
(and probably 10.5.x) using the old Carbon libraries.  I plan to build on
Mavericks using John McIntosh's Cocoa platform support files soon.

1. Install the tools (Xcode etc);  the CoreVM.xcodeproj is set-up to build
   using gcc 4.2 but you can optionally install the Intel C++ compiler 11.1
   and change the compilerSpec in CoreVM.xcodeproj/project.pbxproj to get
   better performance.

2. Either disable the building of the Bochs plugin (see each makevm file,
disabling the lines beginning "# Build the BochsIA32Plugin") or build the
Bochs support libraries (see Building the Bochs Support Libraries below).

3. cd to the VM configuration of your choice and execute
	./mvm -A
This will build Fast.app, Debug.app and Assert.app applivations containing the
three basic VM configurations.  If the configuration includes the multi-threaded
VM you can use mvm -AS to make the single-threaded VMs, mvm -AT to make the
multi-threadeds in FastMT.app et al, and mvm -A to make them all.  mvm -d will
make the Debug.app VM, etc.  mvm -? provides the gory details.


Each build directory contains three files
	plugins.int
	plugins.ext
On other platforms editing these and making is all one needs to do to change the
set of plugins.  Alas on Xcode one also has to edit the relevant Xcode projects
to add and remove source files.  If you're brave enough to contemplate this
you're brave enough to figure out how to do this yourself.


Building the Bochs Support Libraries
------------------------------------
If you want to get the Cog VM simulator working you'll need to build the
BochsIA32Plugin and to build that you'll need to first build bochs.  First
check-out the processor simulator source tree containing Bochs:
     svn co http://www.squeakvm.org/svn/squeak/branches/Cog/processors
Then build libraries macbochs/{cpu/libcpu.a,disasm/libdisasm.a,fpu/libfpu.a}
  $ cd ../processors/IA32/macbochs
  $ ./conf.COG
  $ ../bochs/makeem


Using gcc with Xcode 6.x, Mac OS X > 10.6
-----------------------------------------
We're in the process of transitioning from a Carbon/Mac OS X 10.6/Xcode
3.1.x build system to a Cocoa/Mac OS X 10.9 or above/Xcode 6.x/7.x build
system.  We're still building a VM that should run on 10.6.  By default
Xcode uses the clang compiler.
You may want to use a different compiler.  For example, to install gcc 5.2
see http://hamelot.co.uk/programming/add-gcc-compiler-to-xcode-6/
(Thanks Hammad!).
Essentially
- install brew
	ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
- get all available versions of gcc
	brew tap homebrew/versions
- build gcc 5.2 (Eliot: my first attempt failed with some library
		incompatibility during the bootstrap, I then installed 4.8 successfully
		and retried installing 5.2 and miraculously this time it worked)
	brew install gcc5
- get the GCC 5.2 plugin for Xcode:
	git clone https://github.com/hmazhar/xcode-gcc.git
- install the Xcode plugin for the gcc 5.2 compiler
	open /Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/SharedSupport/Developer/Library/Xcode/Plug-ins/
	open xcode-gcc
 and use the finder to copy the plugin into the Xcode app bundle.

Optimization level and gcc version
----------------------------------
There are issues with gcc version > 4.2.1.  Any of the following flags may break the build at -O2:
-ftree-pre
-fpartial-inlining
-fcaller-saves

They're turned off in the Xcode files provided.


Eliot Miranda
November 2015
